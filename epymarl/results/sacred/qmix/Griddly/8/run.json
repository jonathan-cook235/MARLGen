{
  "artifacts": [],
  "command": "my_main",
  "experiment": {
    "base_dir": "/Users/jonnycook/Desktop/MARLGen/epymarl/src",
    "dependencies": [
      "munch==2.5.0",
      "numpy==1.21.5",
      "PyYAML==6.0",
      "sacred==0.8.2",
      "torch==1.10.2"
    ],
    "mainfile": "main.py",
    "name": "pymarl",
    "repositories": [],
    "sources": [
      [
        "main.py",
        "_sources/main_b201ac47322e751c736a1552d451c0fd.py"
      ],
      [
        "run.py",
        "_sources/run_ca1982628fbd6f56dea25d3d2b533d62.py"
      ],
      [
        "utils/logging.py",
        "_sources/logging_8309e899ab76a4e610428ba7ee8d8acb.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/config/captured_function.py\", line 42, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"src/main.py\", line 49, in my_main\n    run(_run, config, _log)\n",
    "  File \"/Users/jonnycook/Desktop/MARLGen/epymarl/src/run.py\", line 56, in run\n    run_sequential(args=args, logger=logger)\n",
    "  File \"/Users/jonnycook/Desktop/MARLGen/epymarl/src/run.py\", line 183, in run_sequential\n    episode_batch = runner.run(test_mode=False)\n",
    "  File \"/Users/jonnycook/Desktop/MARLGen/epymarl/src/runners/episode_runner.py\", line 70, in run\n    actions = self.mac.select_actions(self.batch, t_ep=self.t, t_env=self.t_env, test_mode=test_mode)\n",
    "  File \"/Users/jonnycook/Desktop/MARLGen/epymarl/src/controllers/basic_controller.py\", line 24, in select_actions\n    chosen_actions = self.action_selector.select_action(agent_outputs[bs], avail_actions[bs], t_env, test_mode=test_mode)\n",
    "  File \"/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/action_selectors.py\", line 73, in select_action\n    m = Categorical(agent_inputs)\n",
    "  File \"/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/torch/distributions/categorical.py\", line 64, in __init__\n    super(Categorical, self).__init__(batch_shape, validate_args=validate_args)\n",
    "  File \"/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/torch/distributions/distribution.py\", line 56, in __init__\n    f\"Expected parameter {param} \"\n",
    "ValueError: Expected parameter probs (Tensor of shape (1, 2, 5)) of distribution Categorical(probs: torch.Size([1, 2, 5])) to satisfy the constraint Simplex(), but found invalid values:\ntensor([[[-0.2088,  1.4356, -0.8478, -0.5731,  1.1941],\n         [-0.2997,  1.0617, -0.3718, -0.4765,  1.0863]]],\n       grad_fn=<DivBackward0>)\n"
  ],
  "heartbeat": "2022-06-24T10:18:55.369305",
  "host": {
    "ENV": {},
    "cpu": "Apple M1",
    "hostname": "Jonnys-MacBook-Pro.local",
    "os": [
      "Darwin",
      "Darwin-20.5.0-x86_64-i386-64bit"
    ],
    "python_version": "3.7.11"
  },
  "meta": {
    "command": "my_main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [],
      "help": false,
      "with": false
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2022-06-24T10:18:54.814515",
  "status": "FAILED",
  "stop_time": "2022-06-24T10:18:55.370207"
}