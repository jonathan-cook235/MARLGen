[INFO 13:13:39] pymarl Running command 'my_main'
[INFO 13:13:39] pymarl Started run with ID "149"
[DEBUG 13:13:39] pymarl Starting Heartbeat
[DEBUG 13:13:39] my_main Started
Seed: 2234
about to run
[WARNING 13:13:39] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 13:13:39] my_main Experiment Parameters:
[INFO 13:13:39] my_main 

{   'action_selector': 'epsilon_greedy',
    'add_value_last_step': True,
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 10,
    'batch_size_run': 2,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_type': 'ac_critic',
    'double_q': True,
    'entropy_coef': 0.01,
    'env': 'griddlygen',
    'env_args': {   'level_seeds': array([8936, 9846, 8179, ..., 2125, 6510, 4544]),
                    'seed': 2234},
    'epochs': 4,
    'eps_clip': 0.2,
    'epsilon_anneal_time': 5000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'evaluation_epsilon': 0.0,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hidden_dim': 64,
    'hypergroup': None,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mask_before_softmax': True,
    'max_before_softmax': True,
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_individual_obs': False,
    'obs_last_action': False,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'q_nstep': 5,
    'repeat_id': 1,
    'runner': 'parallel',
    'runner_log_interval': 1000,
    'save_model': False,
    'save_model_interval': 50000,
    'save_replay': False,
    'seed': 2234,
    'standardise_returns': False,
    'standardise_rewards': True,
    't_max': 20050000,
    'target_update_interval_or_tau': 200,
    'test_greedy': True,
    'test_interval': 50000,
    'test_nepisode': 100,
    'use_cuda': False,
    'use_rnn': False,
    'use_tensorboard': False}

ENV_ARGS[i]
{'seed': 2234, 'level_seeds': array([8936, 9846, 8179, ..., 2125, 6510, 4544])}
ENV_ARGS[i]
{'seed': 2234, 'level_seeds': array([8936, 9846, 8179, ..., 2125, 6510, 4544])}
KWARGS
{'seed': 2234, 'level_seeds': array([8936, 9846, 8179, ..., 2125, 6510, 4544])}
KWARGS
{'seed': 2235, 'level_seeds': array([8936, 9846, 8179, ..., 2125, 6510, 4544])}
[2022-07-18 13:13:39.987] [info] No level specified, will use the first level described in the GDY.
[2022-07-18 13:13:39.992] [info] No level specified, will use the first level described in the GDY.
Process Process-2:
Traceback (most recent call last):
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
    self.run()
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/multiprocessing/process.py", line 99, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/runners/parallel_runner.py", line 261, in env_worker
    remote.send(env.get_env_info())
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/envs/game_2.py", line 282, in get_env_info
    "state_shape": self.get_state_size(),
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/envs/game_2.py", line 206, in get_state_size
    state_size = len(self.get_state().flatten())
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/envs/game_2.py", line 202, in get_state
    return super()._get_observation(self.game.observe(), self._global_observer_type)
RuntimeError: Observer not ready, must be initialized and reset before update() can be called.
Exception ignored in: <function VideoRecorder.__del__ at 0x7fb5702ad050>
Traceback (most recent call last):
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/griddly/RenderTools.py", line 99, in __del__
    self.close()
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/griddly/RenderTools.py", line 95, in close
    self._image_encoder.close()
AttributeError: 'VideoRecorder' object has no attribute '_image_encoder'
