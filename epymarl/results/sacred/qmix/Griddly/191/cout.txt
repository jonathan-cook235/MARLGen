[INFO 15:20:13] pymarl Running command 'my_main'
[INFO 15:20:13] pymarl Started run with ID "191"
[DEBUG 15:20:13] pymarl Starting Heartbeat
[DEBUG 15:20:13] my_main Started
Seed: 9144
about to run
[WARNING 15:20:13] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 15:20:13] my_main Experiment Parameters:
[INFO 15:20:13] my_main 

{   'action_selector': 'epsilon_greedy',
    'add_value_last_step': True,
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 10,
    'batch_size_run': 3,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_type': 'ac_critic',
    'double_q': True,
    'entropy_coef': 0.01,
    'env': 'griddlygen',
    'env_args': {   'level_seeds': array([6234, 4157, 5153, ..., 9855, 6807, 4362]),
                    'seed': 9144},
    'epochs': 4,
    'eps_clip': 0.2,
    'epsilon_anneal_time': 5000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'evaluation_epsilon': 0.0,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hidden_dim': 64,
    'hypergroup': None,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mask_before_softmax': True,
    'max_before_softmax': True,
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_individual_obs': False,
    'obs_last_action': False,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'q_nstep': 5,
    'repeat_id': 1,
    'runner': 'parallel',
    'runner_log_interval': 1000,
    'save_model': False,
    'save_model_interval': 50000,
    'save_replay': False,
    'seed': 9144,
    'standardise_returns': False,
    'standardise_rewards': True,
    't_max': 20050000,
    'target_update_interval_or_tau': 200,
    'test_greedy': True,
    'test_interval': 50000,
    'test_nepisode': 99,
    'use_cuda': False,
    'use_rnn': False,
    'use_tensorboard': False}

KWARGS
{'seed': 9144, 'level_seeds': array([6234, 4157, 5153, ..., 9855, 6807, 4362])}
KWARGS
{'seed': 9145, 'level_seeds': array([6234, 4157, 5153, ..., 9855, 6807, 4362])}
[2022-07-18 15:20:13.937] [info] No level specified, will use the first level described in the GDY.
in env worker
KWARGS
{'seed': 9146, 'level_seeds': array([6234, 4157, 5153, ..., 9855, 6807, 4362])}
[2022-07-18 15:20:13.948] [info] No level specified, will use the first level described in the GDY.
[2022-07-18 15:20:13.977] [info] No level specified, will use the first level described in the GDY.
[INFO 15:20:14] my_main Beginning training for 20000 episodes
/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py:108: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py:108: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 1.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0.,  0.]],

        [[ 0.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 1.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [-1.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.]],

        [[ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.]],

        [[ 0.],
         [ 0.],
         [ 1.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 1.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.]]])
v reward
torch.Size([3, 51])
torch.Size([3, 51, 1])
[INFO 15:20:14] my_main t_env: 150 / 20050000
[INFO 15:20:14] my_main Estimated time left: 1 minutes, 34 seconds. Time passed: 0 seconds
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[-1.,  0.]],

        [[-1.,  0.]],

        [[-1.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[-1.,  0.]],

        [[-1.,  0.]],

        [[-1.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0., -1.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[-1.,  0.]],

        [[-1.,  0.]],

        [[-1.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0., -1.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[-1.,  0.]],

        [[-1.,  0.]],

        [[-1.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0., -1.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0., -1.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[-1.,  0.]],

        [[-1.,  0.]],

        [[-1.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0., -1.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0.,  0.]],

        [[ 0., -1.]],

        [[ 0.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0.,  0.]],

        [[ 0.,  0.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.]],

        [[ 0.],
         [-1.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.]],

        [[ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [-1.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.],
         [ 0.]]])
v reward
torch.Size([3, 51])
torch.Size([3, 51, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[1., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0.,  0.]],

        [[ 0.,  0.]],

        [[ 0., -1.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0., -1.]],

        [[ 0.,  0.]],

        [[ 0.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[ 0.,  0.]],

        [[ 0.,  0.]],

        [[-1.,  0.]]])
v reward
torch.Size([3, 1])
torch.Size([3, 1, 1])
v before summing
tensor([[[0., 0.]],

        [[0., 0.]]])
v reward
torch.Size([2, 1])
torch.Size([2, 1, 1])
