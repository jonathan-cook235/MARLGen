src/main.py:71: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working
  if isinstance(v, collections.Mapping):
[INFO 15:58:06] root Saving to FileStorageObserver in results/sacred.
[DEBUG 15:58:07] pymarl Using capture mode "fd"
[INFO 15:58:07] pymarl Running command 'my_main'
[INFO 15:58:07] pymarl Started run with ID "5"
[DEBUG 15:58:07] pymarl Starting Heartbeat
[DEBUG 15:58:07] my_main Started
[WARNING 15:58:07] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 15:58:07] my_main Experiment Parameters:
0
[INFO 15:58:07] my_main
{   'action_selector': 'soft_policies',
    'add_value_last_step': True,
    'agent': 'rnn',
    'agent_output_type': 'pi_logits',
    'batch_size': 10,
    'batch_size_run': 10,
    'buffer_cpu_only': True,
    'buffer_size': 10,
    'checkpoint_path': '',
    'critic_type': 'ac_critic',
    'entropy_coef': 0.01,
    'env': 'griddly',
    'env_args': {   },
    'epochs': 4,
    'eps_clip': 0.2,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hidden_dim': 64,
    'hypergroup': None,
    'label': 'default_label',
    'learner': 'ppo_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 50000,
    'lr': 0.0003,
    'mac': 'basic_mac',
    'mask_before_softmax': True,
    'name': 'ippo',
    'obs_agent_id': True,
    'obs_individual_obs': False,
    'obs_last_action': False,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'q_nstep': 5,
    'repeat_id': 1,
    'runner': 'episode',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 50000,
    'save_replay': False,
    'seed': 717628456,
    'standardise_returns': False,
    'standardise_rewards': True,
    't_max': 20050000,
    'target_update_interval_or_tau': 0.01,
    'test_greedy': True,
    'test_interval': 50000,
    'test_nepisode': 100,
    'use_cuda': False,
    'use_rnn': True,
    'use_tensorboard': False}
[INFO 15:58:07] my_main Beginning training for 20050000 timesteps
/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py:108: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py:108: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[INFO 15:58:08] my_main t_env: 25 / 20050000
[INFO 15:58:08] my_main Estimated time left: 2 minutes, 58 seconds. Time passed: 0 seconds
25
50
75
100
125
150
175
200
225
250
275
300
325
350
375
400
425
450
475
500
525
550
575
600
625
650
675
700
725
750
775
800
825
850
875
900
925
950
975
1000
1025
1050
1075
1100
1125
1150
1175
1200
1225
1250
1275
1300
1325
1350
1375
1400
1425
1450
1475
1500
1525
1550
1575
1600
1625
1650
1675
1700
1725
1750
1775
1800
1825
1850
1875
1900
1925
1950
1975
2000
2025
2050
2075
2100
2125
2150
2175
2200
2225
2250
2275
2300
2325
2350
2375
2400
2425
2450
2475
2500
2525
2550
2575
2600
2625
2650
2675
2700
2725
2750
2775
2800
2825
2850
2875
2900
2925
2950
2975
3000
3025
3050
3075
3100
3125
3150
3175
3200
3225
3250
3275
3300
3325
3350
3375
3400
3425
3450
3475
3500
3525
3550
3575
3600
3625
3650
3675
3700
3725
3750
3775
3800
3825
3850
3875
3900
3925
3950
3975
4000
4025
4050
4075
4100
4125
4150
4175
4200
4225
4250
4275
4300
4325
4350
4375
4400
4425
4450
4475
4500
4525
4550
4575
4600
4625
4650
4675
4700
4725
4750
4775
4800
4825
4850
4875
4900
4925
4950
4975
5000
5025
5050
5075
5100
5125
5150
5175
5200
5225
5250
5275
5300
5325
5350
5375
5400
5425
5450
5475
5500
5525
5550
5575
5600
5625
5650
5675
5700
5725
5750
5775
5800
5825
5850
5875
5900
5925
5950
5975
6000
6025
6050
6075
6100
6125
6150
6175
6200
6225
6250
6275
6300
6325
6350
6375
6400
6425
6450
6475
6500
6525
6550
6575
6600
6625
6650
6675
6700
6725
6750
6775
6800
6825
6850
6875
6900
6925
6950
6975
7000
7025
7050
7075
7100
7125
7150
7175
7200
7225
7250
7275
7300
7325
7350
7375
7400
7425
7450
7475
7500
7525
7550
7575
7600
7625
7650
7675
7700
7725
7750
7775
7800
7825
7850
7875
7900
7925
7950
7975
8000
8025
8050
8075
8100
8125
8150
8175
8200
8225
8250
8275
8300
8325
8350
8375
8400
8425
8450
8475
8500
8525
8550
8575
8600
8625
8650
8675
8700
8725
8750
8775
8800
8825
[DEBUG 16:00:56] pymarl Stopping Heartbeat
[WARNING 16:00:56] pymarl Aborted after 0:02:50!
Traceback (most recent call last):
  File "src/main.py", line 130, in <module>
    ex.run_commandline(params)
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/experiment.py", line 318, in run_commandline
    options=args,
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/experiment.py", line 276, in run
    run()
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/run.py", line 238, in __call__
    self.result = self.main_function(*args)
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/config/captured_function.py", line 42, in captured_function
    result = wrapped(*args, **kwargs)
  File "src/main.py", line 49, in my_main
    run(_run, config, _log)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/run.py", line 56, in run
    run_sequential(args=args, logger=logger)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/run.py", line 183, in run_sequential
    episode_batch = runner.run(test_mode=False)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/runners/episode_runner.py", line 64, in run
    self.batch.update(pre_transition_data, ts=self.t)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py", line 108, in update
    v = th.tensor(v, dtype=dtype, device=self.device)
KeyboardInterrupt