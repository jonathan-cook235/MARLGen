
0
src/main.py:71: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working
  if isinstance(v, collections.Mapping):
[INFO 10:00:42] root Saving to FileStorageObserver in results/sacred.
[DEBUG 10:00:42] pymarl Using capture mode "fd"
[INFO 10:00:42] pymarl Running command 'my_main'
[INFO 10:00:42] pymarl Started run with ID "1"
[DEBUG 10:00:42] pymarl Starting Heartbeat
[DEBUG 10:00:42] my_main Started
[WARNING 10:00:42] my_main CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!
[INFO 10:00:42] my_main Experiment Parameters:
[INFO 10:00:42] my_main
{   'action_selector': 'soft_policies',
    'add_value_last_step': True,
    'agent': 'rnn',
    'agent_output_type': 'pi_logits',
    'batch_size': 10,
    'batch_size_run': 10,
    'buffer_cpu_only': True,
    'buffer_size': 10,
    'checkpoint_path': '',
    'critic_type': 'ac_critic',
    'entropy_coef': 0.01,
    'env': 'griddly',
    'env_args': {   },
    'epochs': 4,
    'eps_clip': 0.2,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hidden_dim': 64,
    'hypergroup': None,
    'label': 'default_label',
    'learner': 'ppo_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 50000,
    'lr': 0.0003,
    'mac': 'basic_mac',
    'mask_before_softmax': True,
    'name': 'ippo',
    'obs_agent_id': True,
    'obs_individual_obs': False,
    'obs_last_action': False,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'q_nstep': 5,
    'repeat_id': 1,
    'runner': 'episode',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 50000,
    'save_replay': False,
    'seed': 717628456,
    'standardise_returns': False,
    'standardise_rewards': True,
    't_max': 20050000,
    'target_update_interval_or_tau': 0.01,
    'test_greedy': True,
    'test_interval': 50000,
    'test_nepisode': 100,
    'use_cuda': False,
    'use_rnn': True,
    'use_tensorboard': False}
[INFO 10:00:42] my_main Beginning training for 20050000 timesteps
/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py:108: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/episode_buffer.py:108: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[INFO 10:00:43] my_main t_env: 25 / 20050000
[INFO 10:00:43] my_main Estimated time left: 2 minutes, 55 seconds. Time passed: 0 seconds
25
50
75
100
125
150
175
200
225
250
275
300
325
350
375
400
425
450
475
500
525
550
575
600
625
650
675
700
725
750
775
800
825
850
875
900
925
950
975
1000
1025
1050
1075
1100
1125
1150
1175
1200
1225
1250
1275
1300
1325
1350
1375
1400
1425
1450
1475
1500
1525
1550
1575
1600
1625
1650
1675
1700
1725
1750
1775
1800
1825
1850
1875
1900
1925
1950
1975
2000
2025
2050
2075
2100
2125
2150
2175
2200
2225
2250
2275
2300
2325
2350
2375
2400
2425
2450
2475
2500
2525
2550
2575
2600
2625
2650
2675
2700
2725
2750
2775
2800
2825
2850
2875
2900
2925
2950
2975
3000
3025
3050
3075
3100
3125
3150
3175
3200
3225
3250
3275
3300
3325
3350
3375
3400
3425
3450
3475
3500
3525
3550
3575
3600
3625
3650
3675
3700
3725
3750
3775
3800
3825
3850
3875
3900
3925
3950
3975
4000
4025
4050
4075
4100
4125
4150
4175
4200
4225
4250
4275
4300
4325
4350
4375
4400
4425
4450
4475
4500
4525
4550
4575
4600
4625
4650
4675
4700
4725
4750
4775
4800
4825
4850
4875
4900
4925
4950
4975
5000
5025
5050
5075
5100
5125
5150
5175
5200
5225
5250
5275
5300
5325
5350
5375
5400
5425
5450
5475
5500
5525
5550
5575
5600
5625
5650
5675
5700
5725
5750
5775
5800
5825
5850
5875
5900
5925
5950
5975
6000
6025
6050
6075
6100
6125
6150
6175
6200
6225
6250
6275
6300
6325
6350
6375
6400
6425
6450
6475
6500
6525
6550
6575
6600
6625
6650
6675
6700
6725
6750
6775
6800
6825
6850
6875
6900
6925
6950
6975
7000
7025
7050
7075
7100
7125
7150
7175
7200
7225
7250
7275
7300
7325
7350
7375
7400
7425
7450
7475
7500
7525
7550
7575
7600
7625
7650
7675
7700
7725
7750
7775
7800
7825
7850
7875
7900
7925
7950
7975
8000
8025
8050
8075
8100
8125
8150
8175
8200
8225
8250
8275
8300
8325
8350
8375
8400
8425
8450
8475
8500
8525
8550
8575
8600
8625
8650
8675
8700
8725
8750
8775
8800
8825
8850
8875
8900
8925
8950
8975
9000
9025
9050
9075
9100
9125
9150
9175
9200
9225
9250
9275
9300
9325
9350
9375
9400
9425
9450
9475
9500
9525
9550
9575
9600
9625
9650
9675
9700
9725
9750
9775
9800
9825
9850
9875
9900
9925
9950
9975
10000
10025
10050
10075
10100
10125
10150
10175
10200
10225
10250
10275
10300
10325
10350
10375
10400
10425
10450
10475
10500
10525
10550
10575
10600
10625
10650
10675
10700
10725
10750
10775
10800
10825
10850
10875
10900
10925
10950
10975
11000
11025
11050
11075
11100
11125
11150
11175
11200
11225
11250
11275
11300
11325
11350
11375
11400
11425
11450
11475
11500
11525
11550
11575
11600
11625
11650
11675
11700
11725
11750
11775
11800
11825
11850
11875
11900
11925
11950
11975
12000
12025
12050
12075
12100
12125
12150
12175
12200
12225
12250
12275
12300
12325
12350
12375
12400
12425
12450
12475
12500
12525
12550
12575
12600
12625
12650
12675
12700
12725
12750
12775
12800
12825
12850
12875
12900
12925
12950
12975
13000
13025
13050
13075
13100
13125
13150
13175
13200
13225
13250
13275
13300
13325
13350
13375
13400
13425
13450
13475
13500
13525
13550
13575
13600
13625
13650
13675
13700
13725
13750
13775
13800
13825
13850
13875
13900
13925
13950
13975
14000
14025
14050
14075
14100
14125
14150
14175
14200
14225
14250
14275
14300
14325
14350
14375
14400
14425
14450
14475
14500
14525
14550
14575
14600
14625
14650
14675
14700
14725
14750
14775
14800
14825
14850
14875
14900
14925
14950
14975
15000
15025
15050
15075
15100
15125
15150
15175
15200
15225
15250
15275
15300
15325
15350
15375
15400
15425
15450
15475
15500
15525
15550
15575
15600
15625
15650
15675
15700
15725
15750
15775
15800
15825
15850
15875
15900
15925
15950
15975
16000
16025
16050
16075
16100
16125
16150
16175
16200
16225
16250
16275
16300
16325
16350
16375
16400
16425
16450
16475
16500
16525
16550
16575
16600
16625
16650
16675
16700
16725
16750
16775
16800
16825
16850
16875
16900
16925
16950
16975
17000
17025
17050
17075
17100
17125
17150
17175
17200
17225
17250
17275
17300
17325
17350
17375
17400
17425
17450
17475
17500
17525
17550
17575
17600
17625
17650
17675
17700
17725
17750
17775
17800
17825
17850
17875
17900
17925
17950
17975
18000
18025
18050
18075
18100
18125
18150
18175
18200
18225
18250
18275
18300
18325
18350
18375
18400
18425
18450
18475
18500
18525
18550
18575
18600
18625
18650
18675
18700
18725
18750
18775
18800
18825
18850
18875
18900
18925
18950
18975
19000
19025
19050
19075
19100
19125
19150
19175
19200
19225
19250
19275
19300
19325
19350
19375
19400
19425
19450
19475
19500
19525
19550
19575
19600
19625
19650
19675
19700
19725
19750
19775
19800
19825
19850
19875
19900
19925
19950
19975
20000
20025
20050
20075
20100
20125
20150
20175
20200
20225
20250
20275
20300
20325
20350
20375
20400
20425
20450
20475
20500
20525
20550
20575
20600
20625
20650
20675
20700
20725
20750
20775
20800
20825
20850
20875
20900
20925
20950
20975
21000
21025
21050
21075
21100
21125
21150
21175
21200
21225
21250
21275
21300
21325
21350
21375
21400
21425
21450
21475
21500
21525
21550
21575
21600
21625
21650
21675
21700
21725
21750
21775
21800
21825
21850
21875
21900
21925
21950
21975
22000
22025
22050
22075
22100
22125
22150
22175
22200
22225
22250
22275
22300
22325
22350
22375
22400
22425
22450
22475
22500
22525
22550
22575
22600
22625
22650
22675
22700
22725
22750
22775
22800
22825
22850
22875
22900
22925
22950
22975
23000
23025
23050
23075
23100
23125
23150
23175
23200
23225
23250
23275
23300
23325
23350
23375
23400
23425
23450
23475
23500
23525
23550
23575
23600
23625
23650
23675
23700
23725
23750
23775
23800
23825
23850
23875
23900
23925
23950
23975
24000
24025
24050
24075
24100
24125
24150
24175
24200
24225
24250
24275
24300
24325
24350
24375
24400
24425
24450
24475
24500
24525
24550
24575
24600
24625
24650
24675
24700
24725
24750
24775
24800
24825
24850
24875
24900
24925
24950
24975
25000
25025
25050
25075
25100
25125
25150
25175
25200
25225
25250
25275
25300
25325
25350
25375
25400
25425
25450
25475
25500
25525
25550
25575
25600
25625
25650
25675
25700
25725
25750
25775
25800
25825
25850
25875
25900
25925
25950
25975
26000
26025
26050
26075
26100
26125
26150
26175
26200
26225
26250
26275
26300
26325
26350
26375
26400
26425
26450
26475
26500
26525
26550
26575
26600
26625
26650
26675
26700
26725
26750
26775
26800
26825
26850
26875
26900
26925
26950
26975
27000
27025
27050
27075
27100
27125
27150
27175
27200
27225
27250
27275
27300
27325
27350
27375
27400
27425
27450
27475
27500
27525
27550
27575
27600
27625
27650
27675
27700
27725
27750
27775
27800
27825
27850
27875
27900
27925
27950
27975
28000
28025
28050
28075
28100
28125
28150
28175
28200
28225
28250
28275
28300
28325
28350
28375
28400
28425
28450
28475
28500
28525
28550
28575
28600
28625
28650
28675
28700
28725
28750
28775
28800
28825
28850
28875
28900
28925
28950
28975
29000
29025
29050
29075
29100
29125
29150
29175
29200
29225
29250
29275
29300
29325
29350
29375
29400
29425
29450
29475
29500
29525
29550
29575
29600
29625
29650
29675
29700
29725
29750
29775
29800
29825
29850
29875
29900
29925
29950
29975
30000
30025
30050
30075
30100
30125
30150
30175
30200
30225
30250
30275
30300
30325
30350
30375
30400
30425
30450
30475
30500
30525
30550
30575
30600
30625
30650
30675
30700
30725
30750
30775
30800
30825
30850
30875
30900
30925
30950
30975
31000
31025
31050
31075
31100
31125
31150
31175
31200
31225
31250
31275
31300
31325
31350
31375
31400
31425
31450
31475
31500
31525
31550
31575
31600
31625
31650
31675
31700
31725
31750
31775
31800
31825
31850
31875
31900
31925
31950
31975
32000
32025
32050
32075
32100
32125
32150
32175
32200
32225
32250
32275
32300
32325
32350
32375
32400
32425
32450
32475
32500
32525
32550
32575
32600
32625
32650
32675
32700
32725
32750
32775
32800
32825
32850
32875
32900
32925
32950
32975
33000
33025
33050
33075
33100
33125
33150
33175
33200
33225
33250
33275
33300
33325
33350
33375
33400
33425
33450
33475
33500
33525
33550
33575
33600
33625
33650
33675
33700
33725
33750
33775
33800
33825
33850
33875
33900
33925
33950
33975
34000
34025
34050
34075
34100
34125
34150
34175
34200
34225
34250
34275
34300
34325
34350
34375
34400
34425
34450
34475
34500
34525
34550
34575
34600
34625
34650
34675
34700
34725
34750
34775
34800
34825
34850
34875
34900
34925
34950
34975
35000
35025
35050
35075
35100
35125
35150
35175
35200
35225
35250
35275
35300
35325
35350
35375
[DEBUG 10:10:32] pymarl Stopping Heartbeat
[WARNING 10:10:32] pymarl Aborted after 0:09:50!
Traceback (most recent call last):
  File "src/main.py", line 130, in <module>
    ex.run_commandline(params)
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/experiment.py", line 318, in run_commandline
    options=args,
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/experiment.py", line 276, in run
    run()
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/run.py", line 238, in __call__
    self.result = self.main_function(*args)
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/sacred/config/captured_function.py", line 42, in captured_function
    result = wrapped(*args, **kwargs)
  File "src/main.py", line 49, in my_main
    run(_run, config, _log)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/run.py", line 56, in run
    run_sequential(args=args, logger=logger)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/run.py", line 183, in run_sequential
    episode_batch = runner.run(test_mode=False)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/runners/episode_runner.py", line 68, in run
    actions = self.mac.select_actions(self.batch, t_ep=self.t, t_env=self.t_env, test_mode=test_mode)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/controllers/basic_controller.py", line 24, in select_actions
    chosen_actions = self.action_selector.select_action(agent_outputs[bs], avail_actions[bs], t_env, test_mode=test_mode)
  File "/Users/jonnycook/Desktop/MARLGen/epymarl/src/components/action_selectors.py", line 73, in select_action
    m = Categorical(agent_inputs)
  File "/Users/jonnycook/opt/anaconda3/envs/MARLGen/lib/python3.7/site-packages/torch/distributions/categorical.py", line 55, in __init__
    self.probs = probs / probs.sum(-1, keepdim=True)
KeyboardInterrupt